#!/bin/bash
DEPENDENCIES="runit runit-systemd"
DEFAULT_DELAY_SECONDS=60
LOG_PATH="/var/log"

# exit on failure
set -eo pipefail

help() {
cat << EOF

DESCRIPTION
    manage any executable with `runit` so it runs continuously in the background on boot

USAGE
    ./runit --name autoreboot --command "sudo reboot"  --delay-seconds 3600

OPTIONS
    -n, --name
        name of the runit-managed task

    -c, --command
        command or absolute path to executable (will be run as root)

    -e, --exit-command
        optional teardown logic to execute when managed command is halted

    -u, --user
        optional alternate user to assume before executing command and exit-command (default is same as runit process)

    -d, --delay-seconds
        optional time to wait after the executable is called before running again

EOF
}

# parse args https://medium.com/@Drew_Stokes/bash-argument-parsing-54f3b81a6a8f
PARAMS=""
while (( "$#" )); do
    case "$1" in
        -n|--name)
            name="$2"
            shift 2
            ;;
        -c|--command)
            command="$2"
            shift 2
            ;;
        -e|--exit-command)
            exit_command="$2"
            shift 2
            ;;
        -u|--user)
            user="$2"
            shift 2
            ;;
        -d|--delay-seconds)
            delay="$2"
            shift 2
            ;;
        --) # end argument parsing
            shift
            break
            ;;
        -*|--*=) # unsupported flags
            echo "invalid option $1" >&2
            help
            exit 1
            ;;
    esac
done

# ensure script is run as root
if [ "$(id -u)" != "0" ]; then
  echo "permission denied (try sudo)"
  exit 1
fi

# name is always required
if [ -z "$name" ]; then
    echo "ERROR: --name (-n) is a required argument" >&2
    help
    exit 1
fi

# command is always required
if [ -z "$command" ]; then
    echo "ERROR: --command (-c) is a required argument" >&2
    help
    exit 1
fi

# use the current user to execute the command if not otherwise set
if [ -z "$user" ]; then
    user=$(whoami)
fi

# just print a message if no error command is set
if [ -z "$exit_command" ]; then
    exit_command='echo "script exited with nonzero exit code \$1"'
fi

# use default if delay is not specified
if [ -z "$delay" ]; then
    delay=$DEFAULT_DELAY_SECONDS
fi

# install each package if not exists
for PACKAGE in $DEPENDENCIES; do
    if ! dpkg-query -l "$PACKAGE" > /dev/null; then
        apt-get -y install "$PACKAGE"
    else
        echo "$PACKAGE is already installed"
    fi
done

echo "installing command "$name" to /etc/sv/$name"

# create directories and files used by runit
mkdir -p "/var/log/$name"
mkdir -p "/etc/sv/$name/log"
mkdir -p "/etc/service"
touch "/var/log/$name/current"

# write runit command to /etc/sv/{name}/run and make executable
run_path="/etc/sv/$name/run"
echo "#!/bin/bash" > "$run_path"
echo "set -x" >> "$run_path"
echo "exec 2>&1" >> "$run_path"  # redirect all stderr to stdout for svlogd
echo "su $user" >> "$run_path"
echo "$command" >> "$run_path"
echo "sleep $delay" >> "$run_path"
chmod +x "$run_path"

# write teardown command to /etc/sv/{name}/finish and make executable
finish_path="/etc/sv/$name/finish"
echo "#!/bin/bash" > "$finish_path"
echo "set -x" >> "$finish_path"
echo "exec 2>&1" >> "$finish_path"  # redirect all stderr to stdout for svlogd
echo "su $user" >> "$finish_path"
echo "[ ! \$1 -eq 0 ] && $exit_command" >> "$finish_path"  # run if main command exited nonzero
chmod +x "$finish_path"

# write logging config to /etc/sv/{name}/log/run and make executable
log_run_path="/etc/sv/$name/log/run"
echo "#!/bin/bash" > "$log_run_path"
echo "exec svlogd -tt $LOG_PATH/$name" >> "$log_run_path"
chmod +x "$log_run_path"

# initialize runit by symlinking /etc/service (if not exists)
if [ ! -d "/etc/service/$name" ]; then
    ln -s "/etc/sv/$name" "/etc/service/$name"
fi

# restart services to pick up any changes
echo "install completed successfully: restarting service"
sv restart "/etc/service/$name"
sv restart "/etc/service/$name/log"
echo "service restarted"