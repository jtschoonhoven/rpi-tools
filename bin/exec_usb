#!/bin/bash
DEFAULT_USB_PATH="/mnt/usb"
USB_EXECUTABLE_FILENAME="exec"

help() {
cat << EOF

DESCRIPTION
    mount any available USB drive and execute any file named "exec"

USAGE
    ./exec_usb

OPTIONS
    -d, --directory
        path to directory containing media files (/mnt/usb)

EOF
}

# exit with error code 1 if current user is not root
require_root() {
    if [ "$(id -u)" != "0" ]; then
      echo "permission denied (try sudo)" >&2
      exit 1
    fi
}

# return OK (code 0) if named process is active
process_is_active() {
    local process_name=$1
    echo "checking if $process_name is active"
    local active_processes=$(pgrep $process_name | wc -l)
    if [ $active_processes == 0 ]; then
        echo "$process_name is not active"
        return 1
    fi
    echo "$process_name is active"
}

# kill named process (signal 9) and return OK (code 0) on success
kill_process() {
    local process_name=$1
    echo "killing $process_name"
    pkill -9 $process_name
    if process_is_active $process_name; then
        echo "failed to kill $process_name" >&2
        return 1
    fi
    echo "successfully killed $process_name"
}

# return OK (code 0) if given directory is empty or file path does not exist
is_empty() {
    local dirpath=$1
    echo "checking if path \"$dirpath\" is empty"
    if [ "$(ls -A $dirpath 2> /dev/null)" ]; then
        echo "path is not empty"
        return 1
    fi
    echo "path is empty"
}

# attempt to mount a USB device at given path (drive path should match /dev/sda*)
mount_drive() {
    local drive_path=$1
    local usb_path=${2:-$DEFAULT_USB_PATH}
    echo "mounting drive \"$drive_path\" to \"$usb_path\""
    if ! mount "$drive_path" "$usb_path" 2> /dev/null; then
        echo "mount failed" >&2
        return 1
    fi
    echo "mount successful"
}

# attempt to mount each available drive until one succeeds
mount_usb_if_available() {
    local mount_path=${1:-$DEFAULT_USB_PATH}
    echo "mounting any available USB drive"
    for drive_path in /dev/sda*; do
        [ -b "$drive_path" ] || continue
        if mount_drive "$drive_path" "$mount_path"; then
            echo "mounted available drive"
            return 0
        fi
    done
    echo "failed to mount any drive in /dev/sda*" >&2
    return 1
}

# attempt to unmount a device at the given path
unmount_drive() {
    local drive_path=${1:-$DEFAULT_USB_PATH}
    echo "unmounting drive at $drive_path"
    if ! umount "$drive_path"; then
        echo "unmount failed" >&2
        return 1
    fi
    echo "unmount successful"
}

cleanup() {
    local usb_path=${1:-$DEFAULT_USB_PATH}
    echo "cleaning up mclient processes"
    unmount_drive "$usb_path"
    exit 1
}

run() {
    local usb_path=${1:-$DEFAULT_USB_PATH}
    require_root
    echo "running exec_usb"
    local executable_usb_path="$usb_path/$USB_EXECUTABLE_FILENAME"
    while true; do
        if is_empty "$usb_path"; then
            mount_usb_if_available "$usb_path"
        fi
        if ! is_empty "$executable_usb_path"; then
            echo "executing file from USB"
            "$executable_usb_path"
            echo "finished executing file from USB"
        else
            echo "USB executable file not found"
        fi
    done
}

# parse args https://medium.com/@Drew_Stokes/bash-argument-parsing-54f3b81a6a8f
PARAMS=""
while (( "$#" )); do
    case "$1" in
        -d|--directory)
            usb_path="$2"
            shift 2
            ;;
        --) # end argument parsing
            shift
            break
            ;;
        -*|--*=) # unsupported flags
            echo "invalid option $1" >&2
            help
            exit 1
            ;;
    esac
done

run $usb_path