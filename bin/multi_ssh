#!/bin/bash
DEFAULT_COMMAND="uptime"
HOSTS=()

help() {
cat << EOF

DESCRIPTION
    execute shell commands across one or more remote hosts

USAGE
    ./multi_ssh --command "sudo reboot" --async --host user@127.0.0.1 --host user@127.0.0.2

OPTIONS
    -h, --host
        user and hostname/IP to access

    -c, --command
        command to execute on each remote client

    -a, --async
        execute commands asynchronously

    -w, --wait
        wait for all commands to finish before exiting

EOF
}


# parse args https://medium.com/@Drew_Stokes/bash-argument-parsing-54f3b81a6a8f
while (( "$#" )); do
    case "$1" in
        -h|--host)
            HOST=$2
            HOSTS+=( $HOST )
            shift 2
            ;;
        -c|--command)
            COMMAND=$2
            shift 2
            ;;
        -a|--async)
            ASYNC=1
            shift 1
            ;;
        -w|--wait)
            WAIT=1
            shift 1
            ;;
        --) # end argument parsing
            shift
            break
            ;;
        -*|--*=) # unsupported flags
            echo "invalid option $1" >&2
            help
            exit 1
            ;;
    esac
done


# at least one host is required
if [ -z "$HOST" ]; then
    echo "ERROR: --host (-h) is a required argument" >&2
    help
    exit 1
fi


# use default if command is not specified
if [ -z "$COMMAND" ]; then
    COMMAND=$DEFAULT_COMMAND
fi


pids=()
for host in ${HOSTS[@]}; do
    command='ssh $host "$COMMAND"'
    echo "executing command for $host"
    if [ ! -z "$ASYNC" ]; then
        eval "${command}" 2>&1 &
        pids+=($!)
    else
        eval "${command}" 2>&1
    fi
done


# wait for all commands to complete
if [ ! -z "$WAIT" ]; then
    for pid in "${pids[@]}"; do
        wait "$pid"
    done
fi


echo "done"
